use crate::ast::*;
use crate::ast::decl::*;
use crate::ast::exp::*;
use crate::ast::stmt::*;
// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*(?:[^\*]|\*+[^/\*])*\*+/" => {},
  // 剩下的情况采用默认方式处理
  _
}

// Macros
// 逗号分隔的列表
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
// 连续表达式
Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier
};

// ============= CompUnit =============

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

// ============= Decl && Def =============

Decl: Decl = {
  <const_decl: ConstDecl> => Decl::ConstDecl (Box::new(const_decl)),
  <var_decl: VarDecl> => Decl::VarDecl (Box::new(var_decl)),
}

// ---- Constant Declaration ----

ConstDecl: ConstDecl = {
  "const" <btype: BType> <const_defs: ConstDefs> ";" => ConstDecl { <> },
}

BType: BType = "int" => BType::Int;

ConstDefs = Comma<ConstDef>;

ConstDef: ConstDef = {
  <ident: Ident> <index: ("[" <ConstExp> "]")*> "=" <const_init_val: ConstInitVal> => ConstDef { ident: ident, index: index, const_init_val: Box::new(const_init_val) },
}

ConstInitVal: ConstInitVal = {
  <const_exp: ConstExp> => ConstInitVal::ConstExp (Box::new(const_exp)),
}

// ---- Variable Declaration ----

VarDecl: VarDecl = {
  <btype: BType> <var_defs: VarDefs> ";" => VarDecl { <> },
}

VarDefs = Comma<VarDef>;

VarDef: VarDef = {
  <ident: Ident> <index: ("[" <ConstExp> "]")*> => VarDef::VarDef { ident: ident, index: index },
  <ident: Ident> <index: ("[" <ConstExp> "]")*> "=" <init_val: InitVal> => VarDef::VarDefInit { ident: ident, index: index, init_val: Box::new(init_val) },
}

InitVal: InitVal = {
  <exp: Exp> => InitVal::Exp (Box::new(exp)),
}

// ---- Function Definition ----

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

// ============= Block && Stmt =============

// ---- Block ----

Block: Block = "{" <block_items: BlockItem*> "}" => Block { <> };

BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl (Box::new(decl)),
  <stmt: Stmt> => BlockItem::Stmt (Box::new(stmt)),
}

// ---- Statement ----
//https://en.wikipedia.org/wiki/Dangling_else#Avoiding_the_conflict_in_LR_parsers

Stmt: Stmt = {
  <open_stmt: OpenStmt> => <>,
  <closed_stmt: ClosedStmt> => <>,
}

OpenStmt: Stmt = {
  "if" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::IfStmt (Box::new(exp), Box::new(stmt), None),
  "if" "(" <exp: Exp> ")" <closed_stmt: ClosedStmt> "else" <open_stmt: OpenStmt> => Stmt::IfStmt (Box::new(exp), Box::new(closed_stmt), Some(Box::new(open_stmt))),
}

ClosedStmt: Stmt = {
  <non_if_stmt: NonIfStmt> => <>,
  "if" "(" <exp: Exp> ")" <closed_stmt0: ClosedStmt> "else" <closed_stmt1: ClosedStmt> => Stmt::IfStmt (Box::new(exp), Box::new(closed_stmt0), Some(Box::new(closed_stmt1))),
  "while" "(" <exp: Exp> ")" <closed_stmt: ClosedStmt> => Stmt::WhileStmt (Box::new(exp), Box::new(closed_stmt)),
}

NonIfStmt: Stmt ={
  <lval: LVal> "=" <exp: Exp> ";" => Stmt::AssignStmt (Box::new(lval), Box::new(exp)),
  <exp: Exp?> ";" => Stmt::ExpStmt (Box::new(exp)),
  <block: Block> => Stmt::BlockStmt (Box::new(block)),
  "break" ";" => Stmt::BreakStmt,
  "continue" ";" => Stmt::ContinueStmt,
  "return" <exp: Exp> ";" => Stmt::ReturnStmt (Box::new(exp)),
} 

// ---- Expression ----

Exp: Exp = <l_or_exp: LOrExp> => Exp::LOrExp (Box::new(l_or_exp));

LVal: LVal = {
  <ident: Ident> <index: ("[" <Exp> "]")*> => LVal { ident: ident, index: index },
}

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::BracketExp (Box::new(exp)),
  <lval: LVal> => PrimaryExp::LVal (Box::new(lval)),
  <number: Number> => PrimaryExp::Number ( <> ),
}

Number: i32 = <num: IntConst> => <>;

UnaryExp: UnaryExp = {
  <unary_op: UnaryOp> <exp: UnaryExp> => UnaryExp::UnaryExp (unary_op, Box::new(exp)),
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp (Box::new(primary_exp)), 
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Plus,
  "-" => UnaryOp::Minus,
  "!" => UnaryOp::Not,
}

MulExp: MulExp = {
  <unary_exp: UnaryExp> => MulExp::UnaryExp (Box::new(unary_exp)),
  <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => MulExp::MulExp (Box::new(mul_exp), mul_op, Box::new(unary_exp)),
}

MulOp: MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
}

AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp::MulExp (Box::new(mul_exp)),
  <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => AddExp::AddExp (Box::new(add_exp), add_op, Box::new(mul_exp)),
}

AddOp: AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub,
}

RelExp: RelExp = {
  <add_exp: AddExp> => RelExp::AddExp (Box::new(add_exp)),
  <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => RelExp::RelExp (Box::new(rel_exp), rel_op, Box::new(add_exp)),
}

RelOp: RelOp = {
  "<" => RelOp::Lt,
  "<=" => RelOp::Le,
  ">" => RelOp::Gt,
  ">=" => RelOp::Ge,
}

EqExp: EqExp = {
  <rel_exp: RelExp> => EqExp::RelExp (Box::new(rel_exp)),
  <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => EqExp::EqExp (Box::new(eq_exp), eq_op, Box::new(rel_exp)),
}

EqOp: EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::Ne,
}

LAndExp: LAndExp = {
  <eq_exp: EqExp> => LAndExp::EqExp (Box::new(eq_exp)),
  <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::LAndExp (Box::new(l_and_exp), Box::new(eq_exp)),
}

LOrExp: LOrExp = {
  <l_and_exp: LAndExp> => LOrExp::LAndExp (Box::new(l_and_exp)),
  <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => LOrExp::LOrExp (Box::new(l_or_exp), Box::new(l_and_exp)),
}

ConstExp: ConstExp = {
  <exp: Exp> => ConstExp { exp: Box::new(exp) },
}

// ============= Ident && IntConst =============

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
