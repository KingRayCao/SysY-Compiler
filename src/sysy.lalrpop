use crate::ast::*;
use crate::ast::decl::*;
use crate::ast::exp::*;
use crate::ast::stmt::*;
// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*(?:[^\*]|\*+[^/\*])*\*+/" => {},
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt ={
  "return" <exp: Exp> ";" => Stmt::ReturnStmt (Box::new(exp)),
} 

Exp: Exp = <l_or_exp: LOrExp> => Exp::LOrExp (Box::new(l_or_exp));

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::Exp (Box::new(exp)),
  <num: Number> => PrimaryExp::Number ( <> ),
}

UnaryExp: UnaryExp = {
  <unary_op: UnaryOp> <exp: UnaryExp> => UnaryExp::UnaryExp (unary_op, Box::new(exp)),
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp (Box::new(primary_exp)), 
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Plus,
  "-" => UnaryOp::Minus,
  "!" => UnaryOp::Not,
}

MulExp: MulExp = {
  <unary_exp: UnaryExp> => MulExp::UnaryExp (Box::new(unary_exp)),
  <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => MulExp::MulExp (Box::new(mul_exp), mul_op, Box::new(unary_exp)),
}

MulOp: MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
}

AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp::MulExp (Box::new(mul_exp)),
  <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => AddExp::AddExp (Box::new(add_exp), add_op, Box::new(mul_exp)),
}

AddOp: AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub,
}

RelExp: RelExp = {
  <add_exp: AddExp> => RelExp::AddExp (Box::new(add_exp)),
  <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => RelExp::RelExp (Box::new(rel_exp), rel_op, Box::new(add_exp)),
}

RelOp: RelOp = {
  "<" => RelOp::Lt,
  "<=" => RelOp::Le,
  ">" => RelOp::Gt,
  ">=" => RelOp::Ge,
}

EqExp: EqExp = {
  <rel_exp: RelExp> => EqExp::RelExp (Box::new(rel_exp)),
  <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => EqExp::EqExp (Box::new(eq_exp), eq_op, Box::new(rel_exp)),
}

EqOp: EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::Ne,
}

LAndExp: LAndExp = {
  <eq_exp: EqExp> => LAndExp::EqExp (Box::new(eq_exp)),
  <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::LAndExp (Box::new(l_and_exp), Box::new(eq_exp)),
}

LOrExp: LOrExp = {
  <l_and_exp: LAndExp> => LOrExp::LAndExp (Box::new(l_and_exp)),
  <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => LOrExp::LOrExp (Box::new(l_or_exp), Box::new(l_and_exp)),
}

Number: i32 = <num: IntConst> => <>;


// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
